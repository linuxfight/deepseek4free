// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: api.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeepseekApi_CreateChat_FullMethodName     = "/gen.DeepseekApi/CreateChat"
	DeepseekApi_EditChat_FullMethodName       = "/gen.DeepseekApi/EditChat"
	DeepseekApi_DeleteChat_FullMethodName     = "/gen.DeepseekApi/DeleteChat"
	DeepseekApi_GetAllChats_FullMethodName    = "/gen.DeepseekApi/GetAllChats"
	DeepseekApi_GetChatHistory_FullMethodName = "/gen.DeepseekApi/GetChatHistory"
	DeepseekApi_GetQuota_FullMethodName       = "/gen.DeepseekApi/GetQuota"
	DeepseekApi_Completion_FullMethodName     = "/gen.DeepseekApi/Completion"
)

// DeepseekApiClient is the client API for DeepseekApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeepseekApiClient interface {
	// create a new chat
	CreateChat(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Chat, error)
	// change chat name
	EditChat(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// delete a chat
	DeleteChat(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// get all chats
	GetAllChats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChatListResponse, error)
	// get chat messages
	GetChatHistory(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*ChatHistoryResponse, error)
	// get account quota
	GetQuota(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*QuotaResponse, error)
	// chat with llm
	Completion(ctx context.Context, in *CompletionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CompletionResponse], error)
}

type deepseekApiClient struct {
	cc grpc.ClientConnInterface
}

func NewDeepseekApiClient(cc grpc.ClientConnInterface) DeepseekApiClient {
	return &deepseekApiClient{cc}
}

func (c *deepseekApiClient) CreateChat(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Chat, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Chat)
	err := c.cc.Invoke(ctx, DeepseekApi_CreateChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deepseekApiClient) EditChat(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeepseekApi_EditChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deepseekApiClient) DeleteChat(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeepseekApi_DeleteChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deepseekApiClient) GetAllChats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChatListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatListResponse)
	err := c.cc.Invoke(ctx, DeepseekApi_GetAllChats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deepseekApiClient) GetChatHistory(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*ChatHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatHistoryResponse)
	err := c.cc.Invoke(ctx, DeepseekApi_GetChatHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deepseekApiClient) GetQuota(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*QuotaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotaResponse)
	err := c.cc.Invoke(ctx, DeepseekApi_GetQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deepseekApiClient) Completion(ctx context.Context, in *CompletionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CompletionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DeepseekApi_ServiceDesc.Streams[0], DeepseekApi_Completion_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CompletionRequest, CompletionResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeepseekApi_CompletionClient = grpc.ServerStreamingClient[CompletionResponse]

// DeepseekApiServer is the server API for DeepseekApi service.
// All implementations must embed UnimplementedDeepseekApiServer
// for forward compatibility.
type DeepseekApiServer interface {
	// create a new chat
	CreateChat(context.Context, *emptypb.Empty) (*Chat, error)
	// change chat name
	EditChat(context.Context, *Chat) (*emptypb.Empty, error)
	// delete a chat
	DeleteChat(context.Context, *Chat) (*emptypb.Empty, error)
	// get all chats
	GetAllChats(context.Context, *emptypb.Empty) (*ChatListResponse, error)
	// get chat messages
	GetChatHistory(context.Context, *Chat) (*ChatHistoryResponse, error)
	// get account quota
	GetQuota(context.Context, *emptypb.Empty) (*QuotaResponse, error)
	// chat with llm
	Completion(*CompletionRequest, grpc.ServerStreamingServer[CompletionResponse]) error
	mustEmbedUnimplementedDeepseekApiServer()
}

// UnimplementedDeepseekApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeepseekApiServer struct{}

func (UnimplementedDeepseekApiServer) CreateChat(context.Context, *emptypb.Empty) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedDeepseekApiServer) EditChat(context.Context, *Chat) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChat not implemented")
}
func (UnimplementedDeepseekApiServer) DeleteChat(context.Context, *Chat) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChat not implemented")
}
func (UnimplementedDeepseekApiServer) GetAllChats(context.Context, *emptypb.Empty) (*ChatListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllChats not implemented")
}
func (UnimplementedDeepseekApiServer) GetChatHistory(context.Context, *Chat) (*ChatHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatHistory not implemented")
}
func (UnimplementedDeepseekApiServer) GetQuota(context.Context, *emptypb.Empty) (*QuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuota not implemented")
}
func (UnimplementedDeepseekApiServer) Completion(*CompletionRequest, grpc.ServerStreamingServer[CompletionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Completion not implemented")
}
func (UnimplementedDeepseekApiServer) mustEmbedUnimplementedDeepseekApiServer() {}
func (UnimplementedDeepseekApiServer) testEmbeddedByValue()                     {}

// UnsafeDeepseekApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeepseekApiServer will
// result in compilation errors.
type UnsafeDeepseekApiServer interface {
	mustEmbedUnimplementedDeepseekApiServer()
}

func RegisterDeepseekApiServer(s grpc.ServiceRegistrar, srv DeepseekApiServer) {
	// If the following call pancis, it indicates UnimplementedDeepseekApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeepseekApi_ServiceDesc, srv)
}

func _DeepseekApi_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeepseekApiServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeepseekApi_CreateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeepseekApiServer).CreateChat(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeepseekApi_EditChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeepseekApiServer).EditChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeepseekApi_EditChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeepseekApiServer).EditChat(ctx, req.(*Chat))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeepseekApi_DeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeepseekApiServer).DeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeepseekApi_DeleteChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeepseekApiServer).DeleteChat(ctx, req.(*Chat))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeepseekApi_GetAllChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeepseekApiServer).GetAllChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeepseekApi_GetAllChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeepseekApiServer).GetAllChats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeepseekApi_GetChatHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeepseekApiServer).GetChatHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeepseekApi_GetChatHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeepseekApiServer).GetChatHistory(ctx, req.(*Chat))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeepseekApi_GetQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeepseekApiServer).GetQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeepseekApi_GetQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeepseekApiServer).GetQuota(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeepseekApi_Completion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CompletionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeepseekApiServer).Completion(m, &grpc.GenericServerStream[CompletionRequest, CompletionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeepseekApi_CompletionServer = grpc.ServerStreamingServer[CompletionResponse]

// DeepseekApi_ServiceDesc is the grpc.ServiceDesc for DeepseekApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeepseekApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gen.DeepseekApi",
	HandlerType: (*DeepseekApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChat",
			Handler:    _DeepseekApi_CreateChat_Handler,
		},
		{
			MethodName: "EditChat",
			Handler:    _DeepseekApi_EditChat_Handler,
		},
		{
			MethodName: "DeleteChat",
			Handler:    _DeepseekApi_DeleteChat_Handler,
		},
		{
			MethodName: "GetAllChats",
			Handler:    _DeepseekApi_GetAllChats_Handler,
		},
		{
			MethodName: "GetChatHistory",
			Handler:    _DeepseekApi_GetChatHistory_Handler,
		},
		{
			MethodName: "GetQuota",
			Handler:    _DeepseekApi_GetQuota_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Completion",
			Handler:       _DeepseekApi_Completion_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
